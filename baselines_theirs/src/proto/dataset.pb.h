// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dataset.proto

#ifndef PROTOBUF_dataset_2eproto__INCLUDED
#define PROTOBUF_dataset_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CoreNLP.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_dataset_2eproto();
void protobuf_AssignDesc_dataset_2eproto();
void protobuf_ShutdownFile_dataset_2eproto();

class Article;
class Paragraph;
class QuestionAnswer;

// ===================================================================

class Article : public ::google::protobuf::Message {
 public:
  Article();
  virtual ~Article();

  Article(const Article& from);

  inline Article& operator=(const Article& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Article& default_instance();

  void Swap(Article* other);

  // implements Message ----------------------------------------------

  inline Article* New() const { return New(NULL); }

  Article* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Article& from);
  void MergeFrom(const Article& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Article* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string title = 1;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // repeated .Paragraph paragraphs = 2;
  int paragraphs_size() const;
  void clear_paragraphs();
  static const int kParagraphsFieldNumber = 2;
  const ::Paragraph& paragraphs(int index) const;
  ::Paragraph* mutable_paragraphs(int index);
  ::Paragraph* add_paragraphs();
  ::google::protobuf::RepeatedPtrField< ::Paragraph >*
      mutable_paragraphs();
  const ::google::protobuf::RepeatedPtrField< ::Paragraph >&
      paragraphs() const;

  // @@protoc_insertion_point(class_scope:Article)
 private:
  inline void set_has_title();
  inline void clear_has_title();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::RepeatedPtrField< ::Paragraph > paragraphs_;
  friend void  protobuf_AddDesc_dataset_2eproto();
  friend void protobuf_AssignDesc_dataset_2eproto();
  friend void protobuf_ShutdownFile_dataset_2eproto();

  void InitAsDefaultInstance();
  static Article* default_instance_;
};
// -------------------------------------------------------------------

class Paragraph : public ::google::protobuf::Message {
 public:
  Paragraph();
  virtual ~Paragraph();

  Paragraph(const Paragraph& from);

  inline Paragraph& operator=(const Paragraph& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Paragraph& default_instance();

  void Swap(Paragraph* other);

  // implements Message ----------------------------------------------

  inline Paragraph* New() const { return New(NULL); }

  Paragraph* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Paragraph& from);
  void MergeFrom(const Paragraph& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Paragraph* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .edu.stanford.nlp.pipeline.Document context = 1;
  bool has_context() const;
  void clear_context();
  static const int kContextFieldNumber = 1;
  const ::edu::stanford::nlp::pipeline::Document& context() const;
  ::edu::stanford::nlp::pipeline::Document* mutable_context();
  ::edu::stanford::nlp::pipeline::Document* release_context();
  void set_allocated_context(::edu::stanford::nlp::pipeline::Document* context);

  // repeated .QuestionAnswer qas = 2;
  int qas_size() const;
  void clear_qas();
  static const int kQasFieldNumber = 2;
  const ::QuestionAnswer& qas(int index) const;
  ::QuestionAnswer* mutable_qas(int index);
  ::QuestionAnswer* add_qas();
  ::google::protobuf::RepeatedPtrField< ::QuestionAnswer >*
      mutable_qas();
  const ::google::protobuf::RepeatedPtrField< ::QuestionAnswer >&
      qas() const;

  // @@protoc_insertion_point(class_scope:Paragraph)
 private:
  inline void set_has_context();
  inline void clear_has_context();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::edu::stanford::nlp::pipeline::Document* context_;
  ::google::protobuf::RepeatedPtrField< ::QuestionAnswer > qas_;
  friend void  protobuf_AddDesc_dataset_2eproto();
  friend void protobuf_AssignDesc_dataset_2eproto();
  friend void protobuf_ShutdownFile_dataset_2eproto();

  void InitAsDefaultInstance();
  static Paragraph* default_instance_;
};
// -------------------------------------------------------------------

class QuestionAnswer : public ::google::protobuf::Message {
 public:
  QuestionAnswer();
  virtual ~QuestionAnswer();

  QuestionAnswer(const QuestionAnswer& from);

  inline QuestionAnswer& operator=(const QuestionAnswer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionAnswer& default_instance();

  void Swap(QuestionAnswer* other);

  // implements Message ----------------------------------------------

  inline QuestionAnswer* New() const { return New(NULL); }

  QuestionAnswer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestionAnswer& from);
  void MergeFrom(const QuestionAnswer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QuestionAnswer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required .edu.stanford.nlp.pipeline.Document question = 2;
  bool has_question() const;
  void clear_question();
  static const int kQuestionFieldNumber = 2;
  const ::edu::stanford::nlp::pipeline::Document& question() const;
  ::edu::stanford::nlp::pipeline::Document* mutable_question();
  ::edu::stanford::nlp::pipeline::Document* release_question();
  void set_allocated_question(::edu::stanford::nlp::pipeline::Document* question);

  // repeated .edu.stanford.nlp.pipeline.Document answers = 3;
  int answers_size() const;
  void clear_answers();
  static const int kAnswersFieldNumber = 3;
  const ::edu::stanford::nlp::pipeline::Document& answers(int index) const;
  ::edu::stanford::nlp::pipeline::Document* mutable_answers(int index);
  ::edu::stanford::nlp::pipeline::Document* add_answers();
  ::google::protobuf::RepeatedPtrField< ::edu::stanford::nlp::pipeline::Document >*
      mutable_answers();
  const ::google::protobuf::RepeatedPtrField< ::edu::stanford::nlp::pipeline::Document >&
      answers() const;

  // repeated int32 answerOffsets = 4;
  int answeroffsets_size() const;
  void clear_answeroffsets();
  static const int kAnswerOffsetsFieldNumber = 4;
  ::google::protobuf::int32 answeroffsets(int index) const;
  void set_answeroffsets(int index, ::google::protobuf::int32 value);
  void add_answeroffsets(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      answeroffsets() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_answeroffsets();

  // @@protoc_insertion_point(class_scope:QuestionAnswer)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_question();
  inline void clear_has_question();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::edu::stanford::nlp::pipeline::Document* question_;
  ::google::protobuf::RepeatedPtrField< ::edu::stanford::nlp::pipeline::Document > answers_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > answeroffsets_;
  friend void  protobuf_AddDesc_dataset_2eproto();
  friend void protobuf_AssignDesc_dataset_2eproto();
  friend void protobuf_ShutdownFile_dataset_2eproto();

  void InitAsDefaultInstance();
  static QuestionAnswer* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Article

// required string title = 1;
inline bool Article::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Article::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Article::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Article::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& Article::title() const {
  // @@protoc_insertion_point(field_get:Article.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Article::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Article.title)
}
inline void Article::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Article.title)
}
inline void Article::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Article.title)
}
inline ::std::string* Article::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:Article.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Article::release_title() {
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Article::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:Article.title)
}

// repeated .Paragraph paragraphs = 2;
inline int Article::paragraphs_size() const {
  return paragraphs_.size();
}
inline void Article::clear_paragraphs() {
  paragraphs_.Clear();
}
inline const ::Paragraph& Article::paragraphs(int index) const {
  // @@protoc_insertion_point(field_get:Article.paragraphs)
  return paragraphs_.Get(index);
}
inline ::Paragraph* Article::mutable_paragraphs(int index) {
  // @@protoc_insertion_point(field_mutable:Article.paragraphs)
  return paragraphs_.Mutable(index);
}
inline ::Paragraph* Article::add_paragraphs() {
  // @@protoc_insertion_point(field_add:Article.paragraphs)
  return paragraphs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Paragraph >*
Article::mutable_paragraphs() {
  // @@protoc_insertion_point(field_mutable_list:Article.paragraphs)
  return &paragraphs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Paragraph >&
Article::paragraphs() const {
  // @@protoc_insertion_point(field_list:Article.paragraphs)
  return paragraphs_;
}

// -------------------------------------------------------------------

// Paragraph

// required .edu.stanford.nlp.pipeline.Document context = 1;
inline bool Paragraph::has_context() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Paragraph::set_has_context() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Paragraph::clear_has_context() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Paragraph::clear_context() {
  if (context_ != NULL) context_->::edu::stanford::nlp::pipeline::Document::Clear();
  clear_has_context();
}
inline const ::edu::stanford::nlp::pipeline::Document& Paragraph::context() const {
  // @@protoc_insertion_point(field_get:Paragraph.context)
  return context_ != NULL ? *context_ : *default_instance_->context_;
}
inline ::edu::stanford::nlp::pipeline::Document* Paragraph::mutable_context() {
  set_has_context();
  if (context_ == NULL) {
    context_ = new ::edu::stanford::nlp::pipeline::Document;
  }
  // @@protoc_insertion_point(field_mutable:Paragraph.context)
  return context_;
}
inline ::edu::stanford::nlp::pipeline::Document* Paragraph::release_context() {
  clear_has_context();
  ::edu::stanford::nlp::pipeline::Document* temp = context_;
  context_ = NULL;
  return temp;
}
inline void Paragraph::set_allocated_context(::edu::stanford::nlp::pipeline::Document* context) {
  delete context_;
  context_ = context;
  if (context) {
    set_has_context();
  } else {
    clear_has_context();
  }
  // @@protoc_insertion_point(field_set_allocated:Paragraph.context)
}

// repeated .QuestionAnswer qas = 2;
inline int Paragraph::qas_size() const {
  return qas_.size();
}
inline void Paragraph::clear_qas() {
  qas_.Clear();
}
inline const ::QuestionAnswer& Paragraph::qas(int index) const {
  // @@protoc_insertion_point(field_get:Paragraph.qas)
  return qas_.Get(index);
}
inline ::QuestionAnswer* Paragraph::mutable_qas(int index) {
  // @@protoc_insertion_point(field_mutable:Paragraph.qas)
  return qas_.Mutable(index);
}
inline ::QuestionAnswer* Paragraph::add_qas() {
  // @@protoc_insertion_point(field_add:Paragraph.qas)
  return qas_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::QuestionAnswer >*
Paragraph::mutable_qas() {
  // @@protoc_insertion_point(field_mutable_list:Paragraph.qas)
  return &qas_;
}
inline const ::google::protobuf::RepeatedPtrField< ::QuestionAnswer >&
Paragraph::qas() const {
  // @@protoc_insertion_point(field_list:Paragraph.qas)
  return qas_;
}

// -------------------------------------------------------------------

// QuestionAnswer

// required string id = 1;
inline bool QuestionAnswer::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestionAnswer::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestionAnswer::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestionAnswer::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& QuestionAnswer::id() const {
  // @@protoc_insertion_point(field_get:QuestionAnswer.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuestionAnswer::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QuestionAnswer.id)
}
inline void QuestionAnswer::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QuestionAnswer.id)
}
inline void QuestionAnswer::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QuestionAnswer.id)
}
inline ::std::string* QuestionAnswer::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:QuestionAnswer.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuestionAnswer::release_id() {
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuestionAnswer::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:QuestionAnswer.id)
}

// required .edu.stanford.nlp.pipeline.Document question = 2;
inline bool QuestionAnswer::has_question() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestionAnswer::set_has_question() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestionAnswer::clear_has_question() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestionAnswer::clear_question() {
  if (question_ != NULL) question_->::edu::stanford::nlp::pipeline::Document::Clear();
  clear_has_question();
}
inline const ::edu::stanford::nlp::pipeline::Document& QuestionAnswer::question() const {
  // @@protoc_insertion_point(field_get:QuestionAnswer.question)
  return question_ != NULL ? *question_ : *default_instance_->question_;
}
inline ::edu::stanford::nlp::pipeline::Document* QuestionAnswer::mutable_question() {
  set_has_question();
  if (question_ == NULL) {
    question_ = new ::edu::stanford::nlp::pipeline::Document;
  }
  // @@protoc_insertion_point(field_mutable:QuestionAnswer.question)
  return question_;
}
inline ::edu::stanford::nlp::pipeline::Document* QuestionAnswer::release_question() {
  clear_has_question();
  ::edu::stanford::nlp::pipeline::Document* temp = question_;
  question_ = NULL;
  return temp;
}
inline void QuestionAnswer::set_allocated_question(::edu::stanford::nlp::pipeline::Document* question) {
  delete question_;
  question_ = question;
  if (question) {
    set_has_question();
  } else {
    clear_has_question();
  }
  // @@protoc_insertion_point(field_set_allocated:QuestionAnswer.question)
}

// repeated .edu.stanford.nlp.pipeline.Document answers = 3;
inline int QuestionAnswer::answers_size() const {
  return answers_.size();
}
inline void QuestionAnswer::clear_answers() {
  answers_.Clear();
}
inline const ::edu::stanford::nlp::pipeline::Document& QuestionAnswer::answers(int index) const {
  // @@protoc_insertion_point(field_get:QuestionAnswer.answers)
  return answers_.Get(index);
}
inline ::edu::stanford::nlp::pipeline::Document* QuestionAnswer::mutable_answers(int index) {
  // @@protoc_insertion_point(field_mutable:QuestionAnswer.answers)
  return answers_.Mutable(index);
}
inline ::edu::stanford::nlp::pipeline::Document* QuestionAnswer::add_answers() {
  // @@protoc_insertion_point(field_add:QuestionAnswer.answers)
  return answers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::edu::stanford::nlp::pipeline::Document >*
QuestionAnswer::mutable_answers() {
  // @@protoc_insertion_point(field_mutable_list:QuestionAnswer.answers)
  return &answers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::stanford::nlp::pipeline::Document >&
QuestionAnswer::answers() const {
  // @@protoc_insertion_point(field_list:QuestionAnswer.answers)
  return answers_;
}

// repeated int32 answerOffsets = 4;
inline int QuestionAnswer::answeroffsets_size() const {
  return answeroffsets_.size();
}
inline void QuestionAnswer::clear_answeroffsets() {
  answeroffsets_.Clear();
}
inline ::google::protobuf::int32 QuestionAnswer::answeroffsets(int index) const {
  // @@protoc_insertion_point(field_get:QuestionAnswer.answerOffsets)
  return answeroffsets_.Get(index);
}
inline void QuestionAnswer::set_answeroffsets(int index, ::google::protobuf::int32 value) {
  answeroffsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuestionAnswer.answerOffsets)
}
inline void QuestionAnswer::add_answeroffsets(::google::protobuf::int32 value) {
  answeroffsets_.Add(value);
  // @@protoc_insertion_point(field_add:QuestionAnswer.answerOffsets)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QuestionAnswer::answeroffsets() const {
  // @@protoc_insertion_point(field_list:QuestionAnswer.answerOffsets)
  return answeroffsets_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QuestionAnswer::mutable_answeroffsets() {
  // @@protoc_insertion_point(field_mutable_list:QuestionAnswer.answerOffsets)
  return &answeroffsets_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dataset_2eproto__INCLUDED
