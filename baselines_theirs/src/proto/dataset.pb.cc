// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dataset.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dataset.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Article_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Article_reflection_ = NULL;
const ::google::protobuf::Descriptor* Paragraph_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Paragraph_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestionAnswer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestionAnswer_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dataset_2eproto() {
  protobuf_AddDesc_dataset_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dataset.proto");
  GOOGLE_CHECK(file != NULL);
  Article_descriptor_ = file->message_type(0);
  static const int Article_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Article, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Article, paragraphs_),
  };
  Article_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Article_descriptor_,
      Article::default_instance_,
      Article_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Article, _has_bits_[0]),
      -1,
      -1,
      sizeof(Article),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Article, _internal_metadata_),
      -1);
  Paragraph_descriptor_ = file->message_type(1);
  static const int Paragraph_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Paragraph, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Paragraph, qas_),
  };
  Paragraph_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Paragraph_descriptor_,
      Paragraph::default_instance_,
      Paragraph_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Paragraph, _has_bits_[0]),
      -1,
      -1,
      sizeof(Paragraph),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Paragraph, _internal_metadata_),
      -1);
  QuestionAnswer_descriptor_ = file->message_type(2);
  static const int QuestionAnswer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionAnswer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionAnswer, question_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionAnswer, answers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionAnswer, answeroffsets_),
  };
  QuestionAnswer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QuestionAnswer_descriptor_,
      QuestionAnswer::default_instance_,
      QuestionAnswer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionAnswer, _has_bits_[0]),
      -1,
      -1,
      sizeof(QuestionAnswer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionAnswer, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dataset_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Article_descriptor_, &Article::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Paragraph_descriptor_, &Paragraph::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QuestionAnswer_descriptor_, &QuestionAnswer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dataset_2eproto() {
  delete Article::default_instance_;
  delete Article_reflection_;
  delete Paragraph::default_instance_;
  delete Paragraph_reflection_;
  delete QuestionAnswer::default_instance_;
  delete QuestionAnswer_reflection_;
}

void protobuf_AddDesc_dataset_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::edu::stanford::nlp::pipeline::protobuf_AddDesc_CoreNLP_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rdataset.proto\032\rCoreNLP.proto\"8\n\007Articl"
    "e\022\r\n\005title\030\001 \002(\t\022\036\n\nparagraphs\030\002 \003(\0132\n.P"
    "aragraph\"_\n\tParagraph\0224\n\007context\030\001 \002(\0132#"
    ".edu.stanford.nlp.pipeline.Document\022\034\n\003q"
    "as\030\002 \003(\0132\017.QuestionAnswer\"\240\001\n\016QuestionAn"
    "swer\022\n\n\002id\030\001 \002(\t\0225\n\010question\030\002 \002(\0132#.edu"
    ".stanford.nlp.pipeline.Document\0224\n\007answe"
    "rs\030\003 \003(\0132#.edu.stanford.nlp.pipeline.Doc"
    "ument\022\025\n\ranswerOffsets\030\004 \003(\005", 348);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dataset.proto", &protobuf_RegisterTypes);
  Article::default_instance_ = new Article();
  Paragraph::default_instance_ = new Paragraph();
  QuestionAnswer::default_instance_ = new QuestionAnswer();
  Article::default_instance_->InitAsDefaultInstance();
  Paragraph::default_instance_->InitAsDefaultInstance();
  QuestionAnswer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dataset_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dataset_2eproto {
  StaticDescriptorInitializer_dataset_2eproto() {
    protobuf_AddDesc_dataset_2eproto();
  }
} static_descriptor_initializer_dataset_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Article::kTitleFieldNumber;
const int Article::kParagraphsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Article::Article()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Article)
}

void Article::InitAsDefaultInstance() {
}

Article::Article(const Article& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Article)
}

void Article::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Article::~Article() {
  // @@protoc_insertion_point(destructor:Article)
  SharedDtor();
}

void Article::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Article::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Article::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Article_descriptor_;
}

const Article& Article::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataset_2eproto();
  return *default_instance_;
}

Article* Article::default_instance_ = NULL;

Article* Article::New(::google::protobuf::Arena* arena) const {
  Article* n = new Article;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Article::Clear() {
  if (has_title()) {
    title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  paragraphs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Article::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Article)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Article.title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_paragraphs;
        break;
      }

      // repeated .Paragraph paragraphs = 2;
      case 2: {
        if (tag == 18) {
         parse_paragraphs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_paragraphs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_paragraphs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_paragraphs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Article)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Article)
  return false;
#undef DO_
}

void Article::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Article)
  // required string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Article.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // repeated .Paragraph paragraphs = 2;
  for (unsigned int i = 0, n = this->paragraphs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->paragraphs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Article)
}

::google::protobuf::uint8* Article::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Article)
  // required string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Article.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // repeated .Paragraph paragraphs = 2;
  for (unsigned int i = 0, n = this->paragraphs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->paragraphs(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Article)
  return target;
}

int Article::ByteSize() const {
  int total_size = 0;

  // required string title = 1;
  if (has_title()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }
  // repeated .Paragraph paragraphs = 2;
  total_size += 1 * this->paragraphs_size();
  for (int i = 0; i < this->paragraphs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->paragraphs(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Article::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Article* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Article>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Article::MergeFrom(const Article& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  paragraphs_.MergeFrom(from.paragraphs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Article::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Article::CopyFrom(const Article& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Article::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->paragraphs())) return false;
  return true;
}

void Article::Swap(Article* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Article::InternalSwap(Article* other) {
  title_.Swap(&other->title_);
  paragraphs_.UnsafeArenaSwap(&other->paragraphs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Article::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Article_descriptor_;
  metadata.reflection = Article_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Article

// required string title = 1;
bool Article::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Article::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void Article::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void Article::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
 const ::std::string& Article::title() const {
  // @@protoc_insertion_point(field_get:Article.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Article::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Article.title)
}
 void Article::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Article.title)
}
 void Article::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Article.title)
}
 ::std::string* Article::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:Article.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Article::release_title() {
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Article::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:Article.title)
}

// repeated .Paragraph paragraphs = 2;
int Article::paragraphs_size() const {
  return paragraphs_.size();
}
void Article::clear_paragraphs() {
  paragraphs_.Clear();
}
const ::Paragraph& Article::paragraphs(int index) const {
  // @@protoc_insertion_point(field_get:Article.paragraphs)
  return paragraphs_.Get(index);
}
::Paragraph* Article::mutable_paragraphs(int index) {
  // @@protoc_insertion_point(field_mutable:Article.paragraphs)
  return paragraphs_.Mutable(index);
}
::Paragraph* Article::add_paragraphs() {
  // @@protoc_insertion_point(field_add:Article.paragraphs)
  return paragraphs_.Add();
}
::google::protobuf::RepeatedPtrField< ::Paragraph >*
Article::mutable_paragraphs() {
  // @@protoc_insertion_point(field_mutable_list:Article.paragraphs)
  return &paragraphs_;
}
const ::google::protobuf::RepeatedPtrField< ::Paragraph >&
Article::paragraphs() const {
  // @@protoc_insertion_point(field_list:Article.paragraphs)
  return paragraphs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Paragraph::kContextFieldNumber;
const int Paragraph::kQasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Paragraph::Paragraph()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Paragraph)
}

void Paragraph::InitAsDefaultInstance() {
  context_ = const_cast< ::edu::stanford::nlp::pipeline::Document*>(&::edu::stanford::nlp::pipeline::Document::default_instance());
}

Paragraph::Paragraph(const Paragraph& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Paragraph)
}

void Paragraph::SharedCtor() {
  _cached_size_ = 0;
  context_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Paragraph::~Paragraph() {
  // @@protoc_insertion_point(destructor:Paragraph)
  SharedDtor();
}

void Paragraph::SharedDtor() {
  if (this != default_instance_) {
    delete context_;
  }
}

void Paragraph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Paragraph::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Paragraph_descriptor_;
}

const Paragraph& Paragraph::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataset_2eproto();
  return *default_instance_;
}

Paragraph* Paragraph::default_instance_ = NULL;

Paragraph* Paragraph::New(::google::protobuf::Arena* arena) const {
  Paragraph* n = new Paragraph;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Paragraph::Clear() {
  if (has_context()) {
    if (context_ != NULL) context_->::edu::stanford::nlp::pipeline::Document::Clear();
  }
  qas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Paragraph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Paragraph)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .edu.stanford.nlp.pipeline.Document context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_qas;
        break;
      }

      // repeated .QuestionAnswer qas = 2;
      case 2: {
        if (tag == 18) {
         parse_qas:
          DO_(input->IncrementRecursionDepth());
         parse_loop_qas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_qas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_qas;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Paragraph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Paragraph)
  return false;
#undef DO_
}

void Paragraph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Paragraph)
  // required .edu.stanford.nlp.pipeline.Document context = 1;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // repeated .QuestionAnswer qas = 2;
  for (unsigned int i = 0, n = this->qas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->qas(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Paragraph)
}

::google::protobuf::uint8* Paragraph::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Paragraph)
  // required .edu.stanford.nlp.pipeline.Document context = 1;
  if (has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->context_, target);
  }

  // repeated .QuestionAnswer qas = 2;
  for (unsigned int i = 0, n = this->qas_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->qas(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Paragraph)
  return target;
}

int Paragraph::ByteSize() const {
  int total_size = 0;

  // required .edu.stanford.nlp.pipeline.Document context = 1;
  if (has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }
  // repeated .QuestionAnswer qas = 2;
  total_size += 1 * this->qas_size();
  for (int i = 0; i < this->qas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->qas(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Paragraph::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Paragraph* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Paragraph>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Paragraph::MergeFrom(const Paragraph& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  qas_.MergeFrom(from.qas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_context()) {
      mutable_context()->::edu::stanford::nlp::pipeline::Document::MergeFrom(from.context());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Paragraph::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Paragraph::CopyFrom(const Paragraph& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Paragraph::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_context()) {
    if (!this->context_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->qas())) return false;
  return true;
}

void Paragraph::Swap(Paragraph* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Paragraph::InternalSwap(Paragraph* other) {
  std::swap(context_, other->context_);
  qas_.UnsafeArenaSwap(&other->qas_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Paragraph::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Paragraph_descriptor_;
  metadata.reflection = Paragraph_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Paragraph

// required .edu.stanford.nlp.pipeline.Document context = 1;
bool Paragraph::has_context() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Paragraph::set_has_context() {
  _has_bits_[0] |= 0x00000001u;
}
void Paragraph::clear_has_context() {
  _has_bits_[0] &= ~0x00000001u;
}
void Paragraph::clear_context() {
  if (context_ != NULL) context_->::edu::stanford::nlp::pipeline::Document::Clear();
  clear_has_context();
}
const ::edu::stanford::nlp::pipeline::Document& Paragraph::context() const {
  // @@protoc_insertion_point(field_get:Paragraph.context)
  return context_ != NULL ? *context_ : *default_instance_->context_;
}
::edu::stanford::nlp::pipeline::Document* Paragraph::mutable_context() {
  set_has_context();
  if (context_ == NULL) {
    context_ = new ::edu::stanford::nlp::pipeline::Document;
  }
  // @@protoc_insertion_point(field_mutable:Paragraph.context)
  return context_;
}
::edu::stanford::nlp::pipeline::Document* Paragraph::release_context() {
  clear_has_context();
  ::edu::stanford::nlp::pipeline::Document* temp = context_;
  context_ = NULL;
  return temp;
}
void Paragraph::set_allocated_context(::edu::stanford::nlp::pipeline::Document* context) {
  delete context_;
  context_ = context;
  if (context) {
    set_has_context();
  } else {
    clear_has_context();
  }
  // @@protoc_insertion_point(field_set_allocated:Paragraph.context)
}

// repeated .QuestionAnswer qas = 2;
int Paragraph::qas_size() const {
  return qas_.size();
}
void Paragraph::clear_qas() {
  qas_.Clear();
}
const ::QuestionAnswer& Paragraph::qas(int index) const {
  // @@protoc_insertion_point(field_get:Paragraph.qas)
  return qas_.Get(index);
}
::QuestionAnswer* Paragraph::mutable_qas(int index) {
  // @@protoc_insertion_point(field_mutable:Paragraph.qas)
  return qas_.Mutable(index);
}
::QuestionAnswer* Paragraph::add_qas() {
  // @@protoc_insertion_point(field_add:Paragraph.qas)
  return qas_.Add();
}
::google::protobuf::RepeatedPtrField< ::QuestionAnswer >*
Paragraph::mutable_qas() {
  // @@protoc_insertion_point(field_mutable_list:Paragraph.qas)
  return &qas_;
}
const ::google::protobuf::RepeatedPtrField< ::QuestionAnswer >&
Paragraph::qas() const {
  // @@protoc_insertion_point(field_list:Paragraph.qas)
  return qas_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuestionAnswer::kIdFieldNumber;
const int QuestionAnswer::kQuestionFieldNumber;
const int QuestionAnswer::kAnswersFieldNumber;
const int QuestionAnswer::kAnswerOffsetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuestionAnswer::QuestionAnswer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QuestionAnswer)
}

void QuestionAnswer::InitAsDefaultInstance() {
  question_ = const_cast< ::edu::stanford::nlp::pipeline::Document*>(&::edu::stanford::nlp::pipeline::Document::default_instance());
}

QuestionAnswer::QuestionAnswer(const QuestionAnswer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QuestionAnswer)
}

void QuestionAnswer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  question_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestionAnswer::~QuestionAnswer() {
  // @@protoc_insertion_point(destructor:QuestionAnswer)
  SharedDtor();
}

void QuestionAnswer::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete question_;
  }
}

void QuestionAnswer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestionAnswer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestionAnswer_descriptor_;
}

const QuestionAnswer& QuestionAnswer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataset_2eproto();
  return *default_instance_;
}

QuestionAnswer* QuestionAnswer::default_instance_ = NULL;

QuestionAnswer* QuestionAnswer::New(::google::protobuf::Arena* arena) const {
  QuestionAnswer* n = new QuestionAnswer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuestionAnswer::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_question()) {
      if (question_ != NULL) question_->::edu::stanford::nlp::pipeline::Document::Clear();
    }
  }
  answers_.Clear();
  answeroffsets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QuestionAnswer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QuestionAnswer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "QuestionAnswer.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_question;
        break;
      }

      // required .edu.stanford.nlp.pipeline.Document question = 2;
      case 2: {
        if (tag == 18) {
         parse_question:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_question()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_answers;
        break;
      }

      // repeated .edu.stanford.nlp.pipeline.Document answers = 3;
      case 3: {
        if (tag == 26) {
         parse_answers:
          DO_(input->IncrementRecursionDepth());
         parse_loop_answers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_answers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_answers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_answerOffsets;
        break;
      }

      // repeated int32 answerOffsets = 4;
      case 4: {
        if (tag == 32) {
         parse_answerOffsets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_answeroffsets())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_answeroffsets())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_answerOffsets;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QuestionAnswer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QuestionAnswer)
  return false;
#undef DO_
}

void QuestionAnswer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QuestionAnswer)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QuestionAnswer.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required .edu.stanford.nlp.pipeline.Document question = 2;
  if (has_question()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->question_, output);
  }

  // repeated .edu.stanford.nlp.pipeline.Document answers = 3;
  for (unsigned int i = 0, n = this->answers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->answers(i), output);
  }

  // repeated int32 answerOffsets = 4;
  for (int i = 0; i < this->answeroffsets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->answeroffsets(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QuestionAnswer)
}

::google::protobuf::uint8* QuestionAnswer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QuestionAnswer)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QuestionAnswer.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required .edu.stanford.nlp.pipeline.Document question = 2;
  if (has_question()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->question_, target);
  }

  // repeated .edu.stanford.nlp.pipeline.Document answers = 3;
  for (unsigned int i = 0, n = this->answers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->answers(i), target);
  }

  // repeated int32 answerOffsets = 4;
  for (int i = 0; i < this->answeroffsets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->answeroffsets(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QuestionAnswer)
  return target;
}

int QuestionAnswer::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_question()) {
    // required .edu.stanford.nlp.pipeline.Document question = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->question_);
  }

  return total_size;
}
int QuestionAnswer::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required .edu.stanford.nlp.pipeline.Document question = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->question_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .edu.stanford.nlp.pipeline.Document answers = 3;
  total_size += 1 * this->answers_size();
  for (int i = 0; i < this->answers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->answers(i));
  }

  // repeated int32 answerOffsets = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->answeroffsets_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->answeroffsets(i));
    }
    total_size += 1 * this->answeroffsets_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestionAnswer::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QuestionAnswer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QuestionAnswer>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestionAnswer::MergeFrom(const QuestionAnswer& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  answers_.MergeFrom(from.answers_);
  answeroffsets_.MergeFrom(from.answeroffsets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_question()) {
      mutable_question()->::edu::stanford::nlp::pipeline::Document::MergeFrom(from.question());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QuestionAnswer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestionAnswer::CopyFrom(const QuestionAnswer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestionAnswer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_question()) {
    if (!this->question_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->answers())) return false;
  return true;
}

void QuestionAnswer::Swap(QuestionAnswer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuestionAnswer::InternalSwap(QuestionAnswer* other) {
  id_.Swap(&other->id_);
  std::swap(question_, other->question_);
  answers_.UnsafeArenaSwap(&other->answers_);
  answeroffsets_.UnsafeArenaSwap(&other->answeroffsets_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuestionAnswer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestionAnswer_descriptor_;
  metadata.reflection = QuestionAnswer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuestionAnswer

// required string id = 1;
bool QuestionAnswer::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QuestionAnswer::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void QuestionAnswer::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void QuestionAnswer::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& QuestionAnswer::id() const {
  // @@protoc_insertion_point(field_get:QuestionAnswer.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuestionAnswer::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QuestionAnswer.id)
}
 void QuestionAnswer::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QuestionAnswer.id)
}
 void QuestionAnswer::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QuestionAnswer.id)
}
 ::std::string* QuestionAnswer::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:QuestionAnswer.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QuestionAnswer::release_id() {
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuestionAnswer::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:QuestionAnswer.id)
}

// required .edu.stanford.nlp.pipeline.Document question = 2;
bool QuestionAnswer::has_question() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QuestionAnswer::set_has_question() {
  _has_bits_[0] |= 0x00000002u;
}
void QuestionAnswer::clear_has_question() {
  _has_bits_[0] &= ~0x00000002u;
}
void QuestionAnswer::clear_question() {
  if (question_ != NULL) question_->::edu::stanford::nlp::pipeline::Document::Clear();
  clear_has_question();
}
const ::edu::stanford::nlp::pipeline::Document& QuestionAnswer::question() const {
  // @@protoc_insertion_point(field_get:QuestionAnswer.question)
  return question_ != NULL ? *question_ : *default_instance_->question_;
}
::edu::stanford::nlp::pipeline::Document* QuestionAnswer::mutable_question() {
  set_has_question();
  if (question_ == NULL) {
    question_ = new ::edu::stanford::nlp::pipeline::Document;
  }
  // @@protoc_insertion_point(field_mutable:QuestionAnswer.question)
  return question_;
}
::edu::stanford::nlp::pipeline::Document* QuestionAnswer::release_question() {
  clear_has_question();
  ::edu::stanford::nlp::pipeline::Document* temp = question_;
  question_ = NULL;
  return temp;
}
void QuestionAnswer::set_allocated_question(::edu::stanford::nlp::pipeline::Document* question) {
  delete question_;
  question_ = question;
  if (question) {
    set_has_question();
  } else {
    clear_has_question();
  }
  // @@protoc_insertion_point(field_set_allocated:QuestionAnswer.question)
}

// repeated .edu.stanford.nlp.pipeline.Document answers = 3;
int QuestionAnswer::answers_size() const {
  return answers_.size();
}
void QuestionAnswer::clear_answers() {
  answers_.Clear();
}
const ::edu::stanford::nlp::pipeline::Document& QuestionAnswer::answers(int index) const {
  // @@protoc_insertion_point(field_get:QuestionAnswer.answers)
  return answers_.Get(index);
}
::edu::stanford::nlp::pipeline::Document* QuestionAnswer::mutable_answers(int index) {
  // @@protoc_insertion_point(field_mutable:QuestionAnswer.answers)
  return answers_.Mutable(index);
}
::edu::stanford::nlp::pipeline::Document* QuestionAnswer::add_answers() {
  // @@protoc_insertion_point(field_add:QuestionAnswer.answers)
  return answers_.Add();
}
::google::protobuf::RepeatedPtrField< ::edu::stanford::nlp::pipeline::Document >*
QuestionAnswer::mutable_answers() {
  // @@protoc_insertion_point(field_mutable_list:QuestionAnswer.answers)
  return &answers_;
}
const ::google::protobuf::RepeatedPtrField< ::edu::stanford::nlp::pipeline::Document >&
QuestionAnswer::answers() const {
  // @@protoc_insertion_point(field_list:QuestionAnswer.answers)
  return answers_;
}

// repeated int32 answerOffsets = 4;
int QuestionAnswer::answeroffsets_size() const {
  return answeroffsets_.size();
}
void QuestionAnswer::clear_answeroffsets() {
  answeroffsets_.Clear();
}
 ::google::protobuf::int32 QuestionAnswer::answeroffsets(int index) const {
  // @@protoc_insertion_point(field_get:QuestionAnswer.answerOffsets)
  return answeroffsets_.Get(index);
}
 void QuestionAnswer::set_answeroffsets(int index, ::google::protobuf::int32 value) {
  answeroffsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuestionAnswer.answerOffsets)
}
 void QuestionAnswer::add_answeroffsets(::google::protobuf::int32 value) {
  answeroffsets_.Add(value);
  // @@protoc_insertion_point(field_add:QuestionAnswer.answerOffsets)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QuestionAnswer::answeroffsets() const {
  // @@protoc_insertion_point(field_list:QuestionAnswer.answerOffsets)
  return answeroffsets_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QuestionAnswer::mutable_answeroffsets() {
  // @@protoc_insertion_point(field_mutable_list:QuestionAnswer.answerOffsets)
  return &answeroffsets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
